{
  "C:\\Users\\USER\\source\\repos\\employee-management-lambda\\serverless.yml": {
    "versionFramework": "4.18.2",
    "servicePath": "C:\\Users\\USER\\source\\repos\\employee-management-lambda\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "employee-management",
      "package": {
        "individually": true,
        "exclude": [
          "employee-management-frontend/**"
        ],
        "artifactsS3KeyDirname": "serverless/employee-management/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
        "artifactDirectoryName": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z"
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "ap-southeast-2",
        "environment": {
          "EMPLOYEES_TABLE": "Employees",
          "CHECKINS_TABLE": "CheckIns"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem"
            ],
            "Resource": [
              "arn:aws:dynamodb:ap-southeast-2:*:table/Employees",
              "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns",
              "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns/index/*"
            ]
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-createEmployee"
              }
            },
            "GetEmployeesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-getEmployees"
              }
            },
            "GetEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-getEmployee"
              }
            },
            "UpdateEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-updateEmployee"
              }
            },
            "DeleteEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-deleteEmployee"
              }
            },
            "CheckInLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-checkIn"
              }
            },
            "GetAttendanceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-getAttendance"
              }
            },
            "GenerateReportLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-generateReport"
              }
            },
            "CheckPermissionsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-management-dev-checkPermissions"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "employee-management",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-management-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-management-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:ap-southeast-2:*:table/Employees",
                            "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns",
                            "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns/index/*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "employee-management",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/createEmployee.zip"
                },
                "Handler": "employees/create.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-createEmployee",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateEmployeeLogGroup"
              ]
            },
            "GetEmployeesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getEmployees.zip"
                },
                "Handler": "employees/getEmployees.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-getEmployees",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetEmployeesLogGroup"
              ]
            },
            "GetEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getEmployee.zip"
                },
                "Handler": "employees/getEmployee.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-getEmployee",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetEmployeeLogGroup"
              ]
            },
            "UpdateEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/updateEmployee.zip"
                },
                "Handler": "employees/update.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-updateEmployee",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateEmployeeLogGroup"
              ]
            },
            "DeleteEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/deleteEmployee.zip"
                },
                "Handler": "employees/delete.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-deleteEmployee",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteEmployeeLogGroup"
              ]
            },
            "CheckInLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/checkIn.zip"
                },
                "Handler": "checkin/checkIn.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-checkIn",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CheckInLogGroup"
              ]
            },
            "GetAttendanceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getAttendance.zip"
                },
                "Handler": "checkin/getAttendance.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-getAttendance",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAttendanceLogGroup"
              ]
            },
            "GenerateReportLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/generateReport.zip"
                },
                "Handler": "checkin/generateReport.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-generateReport",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GenerateReportLogGroup"
              ]
            },
            "CheckPermissionsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                  "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/checkPermissions.zip"
                },
                "Handler": "auth/checkPermissions.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-management-dev-checkPermissions",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "EMPLOYEES_TABLE": "Employees",
                    "CHECKINS_TABLE": "CheckIns"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CheckPermissionsLogGroup"
              ]
            },
            "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateEmployeeLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateEmployeeLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAttendanceLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteEmployeeLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetEmployeesLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CheckInLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GenerateReportLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetEmployeeLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CheckPermissionsLambdaFunction"
                },
                "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-employee-management",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceEmployees": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "employees",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceEmployeesIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCheckin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "checkin",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAttendance": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "attendance",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAttendanceReport": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAttendance"
                },
                "PathPart": "report",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthCheckDashpermissions": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "check-permissions",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEmployeesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEmployeesIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCheckinOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCheckin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAttendanceOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAttendance"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAttendanceReportOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAttendanceReport"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthCheckDashpermissionsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthCheckDashpermissions"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEmployeesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodEmployeesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetEmployeesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodEmployeesIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodEmployeesIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodEmployeesIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodCheckinPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCheckin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CheckInLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAttendanceGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAttendance"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAttendanceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAttendanceReportGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAttendanceReport"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GenerateReportLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAuthCheckDashpermissionsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthCheckDashpermissions"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CheckPermissionsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              ]
            },
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "AuthorizerResultTtlInSeconds": 300,
                "IdentitySource": "method.request.header.Authorization",
                "Name": "2_aDll8F8yq",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "Type": "COGNITO_USER_POOLS",
                "ProviderARNs": [
                  "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq"
                ]
              }
            },
            "ApiGatewayDeployment1756637176759": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodEmployeesOptions",
                "ApiGatewayMethodEmployeesIdVarOptions",
                "ApiGatewayMethodCheckinOptions",
                "ApiGatewayMethodAttendanceOptions",
                "ApiGatewayMethodAttendanceReportOptions",
                "ApiGatewayMethodAuthCheckDashpermissionsOptions",
                "ApiGatewayMethodEmployeesPost",
                "ApiGatewayMethodEmployeesGet",
                "ApiGatewayMethodEmployeesIdVarGet",
                "ApiGatewayMethodEmployeesIdVarPut",
                "ApiGatewayMethodEmployeesIdVarDelete",
                "ApiGatewayMethodCheckinPost",
                "ApiGatewayMethodAttendanceGet",
                "ApiGatewayMethodAttendanceReportGet",
                "ApiGatewayMethodAuthCheckDashpermissionsGet"
              ]
            },
            "CreateEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetEmployeesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetEmployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CheckInLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CheckInLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAttendanceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAttendanceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GenerateReportLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GenerateReportLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CheckPermissionsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CheckPermissionsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "EmployeesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Employees",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "CheckInsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "CheckIns",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "employeeId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "date",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "timestamp",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "employeeId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "date",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "TimestampIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "employeeId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "Export": {
                "Name": "sls-employee-management-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M"
              },
              "Export": {
                "Name": "sls-employee-management-dev-CreateEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "UpdateEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E"
              },
              "Export": {
                "Name": "sls-employee-management-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "GetAttendanceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0"
              },
              "Export": {
                "Name": "sls-employee-management-dev-GetAttendanceLambdaFunctionQualifiedArn"
              }
            },
            "DeleteEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc"
              },
              "Export": {
                "Name": "sls-employee-management-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "GetEmployeesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4"
              },
              "Export": {
                "Name": "sls-employee-management-dev-GetEmployeesLambdaFunctionQualifiedArn"
              }
            },
            "CheckInLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I"
              },
              "Export": {
                "Name": "sls-employee-management-dev-CheckInLambdaFunctionQualifiedArn"
              }
            },
            "GenerateReportLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E"
              },
              "Export": {
                "Name": "sls-employee-management-dev-GenerateReportLambdaFunctionQualifiedArn"
              }
            },
            "GetEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI"
              },
              "Export": {
                "Name": "sls-employee-management-dev-GetEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "CheckPermissionsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0"
              },
              "Export": {
                "Name": "sls-employee-management-dev-CheckPermissionsLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-employee-management-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "createEmployee": {
          "handler": "employees/create.handler",
          "events": [
            {
              "http": {
                "path": "employees",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-createEmployee",
          "package": {
            "artifact": ".serverless\\createEmployee.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M"
        },
        "getEmployees": {
          "handler": "employees/getEmployees.handler",
          "events": [
            {
              "http": {
                "path": "employees",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-getEmployees",
          "package": {
            "artifact": ".serverless\\getEmployees.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4"
        },
        "getEmployee": {
          "handler": "employees/getEmployee.handler",
          "events": [
            {
              "http": {
                "path": "employees/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-getEmployee",
          "package": {
            "artifact": ".serverless\\getEmployee.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI"
        },
        "updateEmployee": {
          "handler": "employees/update.handler",
          "events": [
            {
              "http": {
                "path": "employees/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-updateEmployee",
          "package": {
            "artifact": ".serverless\\updateEmployee.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E"
        },
        "deleteEmployee": {
          "handler": "employees/delete.handler",
          "events": [
            {
              "http": {
                "path": "employees/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-deleteEmployee",
          "package": {
            "artifact": ".serverless\\deleteEmployee.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc"
        },
        "checkIn": {
          "handler": "checkin/checkIn.handler",
          "events": [
            {
              "http": {
                "path": "checkin",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-checkIn",
          "package": {
            "artifact": ".serverless\\checkIn.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I"
        },
        "getAttendance": {
          "handler": "checkin/getAttendance.handler",
          "events": [
            {
              "http": {
                "path": "attendance",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-getAttendance",
          "package": {
            "artifact": ".serverless\\getAttendance.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0"
        },
        "generateReport": {
          "handler": "checkin/generateReport.handler",
          "events": [
            {
              "http": {
                "path": "attendance/report",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-generateReport",
          "package": {
            "artifact": ".serverless\\generateReport.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E"
        },
        "checkPermissions": {
          "handler": "auth/checkPermissions.handler",
          "events": [
            {
              "http": {
                "path": "auth/check-permissions",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "2_aDll8F8yq",
                  "arn": "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-management-dev-checkPermissions",
          "package": {
            "artifact": ".serverless\\checkPermissions.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0"
        }
      },
      "resources": {
        "Resources": {
          "EmployeesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Employees",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CheckInsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "CheckIns",
              "AttributeDefinitions": [
                {
                  "AttributeName": "employeeId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "employeeId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "date",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TimestampIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "employeeId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-southeast-2",
      "environment": {
        "EMPLOYEES_TABLE": "Employees",
        "CHECKINS_TABLE": "CheckIns"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-southeast-2:*:table/Employees",
            "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns",
            "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns/index/*"
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "CreateEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-createEmployee"
            }
          },
          "GetEmployeesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-getEmployees"
            }
          },
          "GetEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-getEmployee"
            }
          },
          "UpdateEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-updateEmployee"
            }
          },
          "DeleteEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-deleteEmployee"
            }
          },
          "CheckInLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-checkIn"
            }
          },
          "GetAttendanceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-getAttendance"
            }
          },
          "GenerateReportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-generateReport"
            }
          },
          "CheckPermissionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/employee-management-dev-checkPermissions"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "employee-management",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-management-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-management-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:ap-southeast-2:*:table/Employees",
                          "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns",
                          "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns/index/*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "employee-management",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/createEmployee.zip"
              },
              "Handler": "employees/create.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-createEmployee",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEmployeeLogGroup"
            ]
          },
          "GetEmployeesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getEmployees.zip"
              },
              "Handler": "employees/getEmployees.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-getEmployees",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEmployeesLogGroup"
            ]
          },
          "GetEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getEmployee.zip"
              },
              "Handler": "employees/getEmployee.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-getEmployee",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEmployeeLogGroup"
            ]
          },
          "UpdateEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/updateEmployee.zip"
              },
              "Handler": "employees/update.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-updateEmployee",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeLogGroup"
            ]
          },
          "DeleteEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/deleteEmployee.zip"
              },
              "Handler": "employees/delete.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-deleteEmployee",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEmployeeLogGroup"
            ]
          },
          "CheckInLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/checkIn.zip"
              },
              "Handler": "checkin/checkIn.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-checkIn",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckInLogGroup"
            ]
          },
          "GetAttendanceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getAttendance.zip"
              },
              "Handler": "checkin/getAttendance.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-getAttendance",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAttendanceLogGroup"
            ]
          },
          "GenerateReportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/generateReport.zip"
              },
              "Handler": "checkin/generateReport.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-generateReport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GenerateReportLogGroup"
            ]
          },
          "CheckPermissionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
                "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/checkPermissions.zip"
              },
              "Handler": "auth/checkPermissions.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "employee-management-dev-checkPermissions",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "EMPLOYEES_TABLE": "Employees",
                  "CHECKINS_TABLE": "CheckIns"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckPermissionsLogGroup"
            ]
          },
          "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEmployeeLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAttendanceLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEmployeeLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEmployeesLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckInLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GenerateReportLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEmployeeLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckPermissionsLambdaFunction"
              },
              "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-employee-management",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceEmployees": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "employees",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEmployeesIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEmployees"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCheckin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "checkin",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAttendance": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "attendance",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAttendanceReport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAttendance"
              },
              "PathPart": "report",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthCheckDashpermissions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "check-permissions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEmployeesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployees"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEmployeesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployeesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCheckinOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheckin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAttendanceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAttendance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAttendanceReportOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAttendanceReport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthCheckDashpermissionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthCheckDashpermissions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEmployeesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployees"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodEmployeesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployees"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEmployeesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodEmployeesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployeesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodEmployeesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployeesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodEmployeesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmployeesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodCheckinPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheckin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckInLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAttendanceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAttendance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAttendanceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAttendanceReportGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAttendanceReport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GenerateReportLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAuthCheckDashpermissionsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthCheckDashpermissions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckPermissionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            ]
          },
          "2UnderscoreaDll8F8yqApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "2_aDll8F8yq",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq"
              ]
            }
          },
          "ApiGatewayDeployment1756637176759": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodEmployeesOptions",
              "ApiGatewayMethodEmployeesIdVarOptions",
              "ApiGatewayMethodCheckinOptions",
              "ApiGatewayMethodAttendanceOptions",
              "ApiGatewayMethodAttendanceReportOptions",
              "ApiGatewayMethodAuthCheckDashpermissionsOptions",
              "ApiGatewayMethodEmployeesPost",
              "ApiGatewayMethodEmployeesGet",
              "ApiGatewayMethodEmployeesIdVarGet",
              "ApiGatewayMethodEmployeesIdVarPut",
              "ApiGatewayMethodEmployeesIdVarDelete",
              "ApiGatewayMethodCheckinPost",
              "ApiGatewayMethodAttendanceGet",
              "ApiGatewayMethodAttendanceReportGet",
              "ApiGatewayMethodAuthCheckDashpermissionsGet"
            ]
          },
          "CreateEmployeeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEmployeesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEmployeeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEmployeeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteEmployeeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckInLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckInLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAttendanceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAttendanceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GenerateReportLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GenerateReportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckPermissionsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckPermissionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EmployeesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Employees",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CheckInsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "CheckIns",
              "AttributeDefinitions": [
                {
                  "AttributeName": "employeeId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "employeeId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "date",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TimestampIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "employeeId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
            "Export": {
              "Name": "sls-employee-management-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M"
            },
            "Export": {
              "Name": "sls-employee-management-dev-CreateEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E"
            },
            "Export": {
              "Name": "sls-employee-management-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "GetAttendanceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0"
            },
            "Export": {
              "Name": "sls-employee-management-dev-GetAttendanceLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc"
            },
            "Export": {
              "Name": "sls-employee-management-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "GetEmployeesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4"
            },
            "Export": {
              "Name": "sls-employee-management-dev-GetEmployeesLambdaFunctionQualifiedArn"
            }
          },
          "CheckInLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I"
            },
            "Export": {
              "Name": "sls-employee-management-dev-CheckInLambdaFunctionQualifiedArn"
            }
          },
          "GenerateReportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E"
            },
            "Export": {
              "Name": "sls-employee-management-dev-GenerateReportLambdaFunctionQualifiedArn"
            }
          },
          "GetEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI"
            },
            "Export": {
              "Name": "sls-employee-management-dev-GetEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "CheckPermissionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0"
            },
            "Export": {
              "Name": "sls-employee-management-dev-CheckPermissionsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-employee-management-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: employee-management\r\n\r\npackage:\r\n  individually: true\r\n  exclude:\r\n    - employee-management-frontend/**\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  region: ap-southeast-2\r\n  environment:\r\n    EMPLOYEES_TABLE: Employees\r\n    CHECKINS_TABLE: CheckIns\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:Query\r\n        - dynamodb:Scan\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n      Resource:\r\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}\r\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHECKINS_TABLE}\r\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHECKINS_TABLE}/index/*\r\n\r\nfunctions:\r\n  createEmployee:\r\n    handler: employees/create.handler\r\n    events:\r\n      - http:\r\n          path: employees\r\n          method: post\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  getEmployees:\r\n    handler: employees/getEmployees.handler\r\n    events:\r\n      - http:\r\n          path: employees\r\n          method: get\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  getEmployee:\r\n    handler: employees/getEmployee.handler\r\n    events:\r\n      - http:\r\n          path: employees/{id}\r\n          method: get\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  updateEmployee:\r\n    handler: employees/update.handler\r\n    events:\r\n      - http:\r\n          path: employees/{id}\r\n          method: put\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  deleteEmployee:\r\n    handler: employees/delete.handler\r\n    events:\r\n      - http:\r\n          path: employees/{id}\r\n          method: delete\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  checkIn:\r\n    handler: checkin/checkIn.handler\r\n    events:\r\n      - http:\r\n          path: checkin\r\n          method: post\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  getAttendance:\r\n    handler: checkin/getAttendance.handler\r\n    events:\r\n      - http:\r\n          path: attendance\r\n          method: get\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  generateReport:\r\n    handler: checkin/generateReport.handler\r\n    events:\r\n      - http:\r\n          path: attendance/report\r\n          method: get\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\n  checkPermissions:\r\n    handler: auth/checkPermissions.handler\r\n    events:\r\n      - http:\r\n          path: auth/check-permissions\r\n          method: get\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - X-Amz-Date\r\n              - Authorization\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n            allowCredentials: false\r\n          authorizer:\r\n            arn: arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq\r\n\r\nresources:\r\n  Resources:\r\n    EmployeesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Employees\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    CheckInsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: CheckIns\r\n        AttributeDefinitions:\r\n          - AttributeName: employeeId\r\n            AttributeType: S\r\n          - AttributeName: date\r\n            AttributeType: S\r\n          - AttributeName: timestamp\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: employeeId\r\n            KeyType: HASH\r\n          - AttributeName: date\r\n            KeyType: RANGE\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: TimestampIndex\r\n            KeySchema:\r\n              - AttributeName: employeeId\r\n                KeyType: HASH\r\n              - AttributeName: timestamp\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "94380fe6-f5ef-4268-bc9d-f5633dd2825c",
    "orgName": "pupss92314",
    "userId": "QMQ0dfnRsB9cLZQP0G",
    "userName": "pupss92314",
    "serviceProviderAwsAccountId": "417371242127",
    "serviceProviderAwsCfStackName": "employee-management-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-southeast-2:417371242127:stack/employee-management-dev/421082f0-861c-11f0-a560-069e26290f51",
    "serviceProviderAwsCfStackCreated": "2025-08-31T03:40:37.552Z",
    "serviceProviderAwsCfStackUpdated": "2025-08-31T09:50:13.607Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetEmployeesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-getEmployees:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-GetEmployeesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CheckInLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-checkIn:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-CheckInLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CheckPermissionsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-checkPermissions:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-CheckPermissionsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GenerateReportLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-generateReport:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-GenerateReportLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-createEmployee:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-CreateEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-updateEmployee:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAttendanceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-getAttendance:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-GetAttendanceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://q24xs6phwi.execute-api.ap-southeast-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-employee-management-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
        "ExportName": "sls-employee-management-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-getEmployee:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-GetEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-southeast-2:417371242127:function:employee-management-dev-deleteEmployee:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-employee-management-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "CreateEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-createEmployee"
          }
        },
        "GetEmployeesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-getEmployees"
          }
        },
        "GetEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-getEmployee"
          }
        },
        "UpdateEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-updateEmployee"
          }
        },
        "DeleteEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-deleteEmployee"
          }
        },
        "CheckInLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-checkIn"
          }
        },
        "GetAttendanceLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-getAttendance"
          }
        },
        "GenerateReportLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-generateReport"
          }
        },
        "CheckPermissionsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/employee-management-dev-checkPermissions"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "employee-management",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-management-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-management-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:ap-southeast-2:*:table/Employees",
                        "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns",
                        "arn:aws:dynamodb:ap-southeast-2:*:table/CheckIns/index/*"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "employee-management",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "CreateEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/createEmployee.zip"
            },
            "Handler": "employees/create.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-createEmployee",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateEmployeeLogGroup"
          ]
        },
        "GetEmployeesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getEmployees.zip"
            },
            "Handler": "employees/getEmployees.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-getEmployees",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetEmployeesLogGroup"
          ]
        },
        "GetEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getEmployee.zip"
            },
            "Handler": "employees/getEmployee.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-getEmployee",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetEmployeeLogGroup"
          ]
        },
        "UpdateEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/updateEmployee.zip"
            },
            "Handler": "employees/update.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-updateEmployee",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateEmployeeLogGroup"
          ]
        },
        "DeleteEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/deleteEmployee.zip"
            },
            "Handler": "employees/delete.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-deleteEmployee",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteEmployeeLogGroup"
          ]
        },
        "CheckInLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/checkIn.zip"
            },
            "Handler": "checkin/checkIn.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-checkIn",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CheckInLogGroup"
          ]
        },
        "GetAttendanceLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/getAttendance.zip"
            },
            "Handler": "checkin/getAttendance.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-getAttendance",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAttendanceLogGroup"
          ]
        },
        "GenerateReportLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/generateReport.zip"
            },
            "Handler": "checkin/generateReport.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-generateReport",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GenerateReportLogGroup"
          ]
        },
        "CheckPermissionsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
              "S3Key": "serverless/employee-management/dev/1756637236980-2025-08-31T10:47:16.980Z/checkPermissions.zip"
            },
            "Handler": "auth/checkPermissions.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "employee-management-dev-checkPermissions",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "EMPLOYEES_TABLE": "Employees",
                "CHECKINS_TABLE": "CheckIns"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CheckPermissionsLogGroup"
          ]
        },
        "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateEmployeeLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateEmployeeLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAttendanceLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteEmployeeLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetEmployeesLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CheckInLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GenerateReportLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetEmployeeLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CheckPermissionsLambdaFunction"
            },
            "CodeSha256": "KwJyXmkm7BvJm0fZpng29DGK24B+5mRsectBHnQZJ0o="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-employee-management",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceEmployees": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "employees",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceEmployeesIdVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceEmployees"
            },
            "PathPart": "{id}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceCheckin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "checkin",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAttendance": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "attendance",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAttendanceReport": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAttendance"
            },
            "PathPart": "report",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuth": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "auth",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuthCheckDashpermissions": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuth"
            },
            "PathPart": "check-permissions",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEmployeesOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployees"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEmployeesIdVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployeesIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodCheckinOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceCheckin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAttendanceOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAttendance"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAttendanceReportOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAttendanceReport"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuthCheckDashpermissionsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthCheckDashpermissions"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEmployeesPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployees"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateEmployeeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodEmployeesGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployees"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetEmployeesLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodEmployeesIdVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployeesIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetEmployeeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodEmployeesIdVarPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployeesIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateEmployeeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodEmployeesIdVarDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEmployeesIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DeleteEmployeeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodCheckinPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceCheckin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CheckInLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAttendanceGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAttendance"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetAttendanceLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAttendanceReportGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAttendanceReport"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GenerateReportLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAuthCheckDashpermissionsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthCheckDashpermissions"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CheckPermissionsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "2UnderscoreaDll8F8yqApiGatewayAuthorizer"
          ]
        },
        "2UnderscoreaDll8F8yqApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 300,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "2_aDll8F8yq",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              "arn:aws:cognito-idp:ap-southeast-2:417371242127:userpool/ap-southeast-2_aDll8F8yq"
            ]
          }
        },
        "ApiGatewayDeployment1756637176759": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodEmployeesOptions",
            "ApiGatewayMethodEmployeesIdVarOptions",
            "ApiGatewayMethodCheckinOptions",
            "ApiGatewayMethodAttendanceOptions",
            "ApiGatewayMethodAttendanceReportOptions",
            "ApiGatewayMethodAuthCheckDashpermissionsOptions",
            "ApiGatewayMethodEmployeesPost",
            "ApiGatewayMethodEmployeesGet",
            "ApiGatewayMethodEmployeesIdVarGet",
            "ApiGatewayMethodEmployeesIdVarPut",
            "ApiGatewayMethodEmployeesIdVarDelete",
            "ApiGatewayMethodCheckinPost",
            "ApiGatewayMethodAttendanceGet",
            "ApiGatewayMethodAttendanceReportGet",
            "ApiGatewayMethodAuthCheckDashpermissionsGet"
          ]
        },
        "CreateEmployeeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetEmployeesLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetEmployeesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetEmployeeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateEmployeeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DeleteEmployeeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CheckInLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CheckInLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetAttendanceLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAttendanceLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GenerateReportLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GenerateReportLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CheckPermissionsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CheckPermissionsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "EmployeesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Employees",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "CheckInsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "CheckIns",
            "AttributeDefinitions": [
              {
                "AttributeName": "employeeId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "date",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "employeeId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "date",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "TimestampIndex",
                "KeySchema": [
                  {
                    "AttributeName": "employeeId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-southeast-2-2669cdaf-fe45",
          "Export": {
            "Name": "sls-employee-management-dev-ServerlessDeploymentBucketName"
          }
        },
        "CreateEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateEmployeeLambdaVersionJVCrl4AhgL6SELkGM0nLg4b6aCaA2j5rpsTWxH59M"
          },
          "Export": {
            "Name": "sls-employee-management-dev-CreateEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "UpdateEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateEmployeeLambdaVersionFkcJIJCYvLGCqNq1krPfr5vz7xyMDkCs9iKii59E"
          },
          "Export": {
            "Name": "sls-employee-management-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "GetAttendanceLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAttendanceLambdaVersionWCZUjPdcXok7Cv34N03NNq3T5KLwBWkbpqR5wY0w0"
          },
          "Export": {
            "Name": "sls-employee-management-dev-GetAttendanceLambdaFunctionQualifiedArn"
          }
        },
        "DeleteEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteEmployeeLambdaVersion0TmIRnLzMCNfMddmbWZTgU4bpq7CV2dtB2q37OGEc"
          },
          "Export": {
            "Name": "sls-employee-management-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "GetEmployeesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetEmployeesLambdaVersionEAABdUgZFxYfAq5W9pMhwtZgdoo845f5a6mZpFXN4"
          },
          "Export": {
            "Name": "sls-employee-management-dev-GetEmployeesLambdaFunctionQualifiedArn"
          }
        },
        "CheckInLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CheckInLambdaVersionGP2JyXVGbqX5odpLfFJpnGWeWAa4U2Pd53bAkAT6I"
          },
          "Export": {
            "Name": "sls-employee-management-dev-CheckInLambdaFunctionQualifiedArn"
          }
        },
        "GenerateReportLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GenerateReportLambdaVersionmG2EMFvLpNIGAQYtHOq41hKMqjK9dYABsesoH4rC6E"
          },
          "Export": {
            "Name": "sls-employee-management-dev-GenerateReportLambdaFunctionQualifiedArn"
          }
        },
        "GetEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetEmployeeLambdaVersion41XmFirQbI7NEA4SWHEzXT0a2eK1IOVcsfo0UYhXKGI"
          },
          "Export": {
            "Name": "sls-employee-management-dev-GetEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "CheckPermissionsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CheckPermissionsLambdaVersionMYikjY6DnHKmYBRuyPrgKSgucFu8plpcTciHnytedU0"
          },
          "Export": {
            "Name": "sls-employee-management-dev-CheckPermissionsLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-employee-management-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}